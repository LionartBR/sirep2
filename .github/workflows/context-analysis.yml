name: Análise Avançada de Contexto

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  analise-contexto-avancada:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout código completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Cache de dependências
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-analysis-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-analysis-

      - name: 🔧 Instalar dependências de análise (sem conflito)
        run: |
          python -m pip install --upgrade pip
          
          # Instalar ferramentas de análise PRIMEIRO (sem requirements.txt)
          pip install radon==6.0.1
          pip install pylint==3.3.8
          pip install black==25.9.0
          pip install isort==6.0.1
          pip install bandit==1.8.6
          pip install mypy==1.18.2
          
          echo "✅ Ferramentas de análise instaladas"

      - name: 📦 Instalar dependências do projeto (opcional)
        run: |
          # Tentar instalar requirements.txt, mas não falhar se houver erro
          if [ -f requirements.txt ]; then
            echo "Tentando instalar requirements.txt..."
            pip install -r requirements.txt --no-deps || echo "⚠️ Alguns pacotes falharam (não crítico)"
          fi
          
          # Alternativas
          if [ -f setup.py ]; then
            pip install -e . --no-deps || echo "⚠️ Setup.py falhou"
          fi
          
          if [ -f pyproject.toml ]; then
            pip install . --no-deps || echo "⚠️ pyproject.toml falhou"
          fi
        continue-on-error: true

      - name: 🔍 Executar análise avançada de contexto
        id: analise
        run: |
          echo "🔍 Iniciando análise..."
          python .github/scripts/context_analyzer.py \
            --output report.md \
            --json analysis_data.json
          
          echo "analysis_completed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 📊 Gerar badge de saúde
        if: always() && steps.analise.outputs.analysis_completed == 'true'
        run: |
          if [ -f report.md ]; then
            SCORE=$(grep -oP 'Score de Saúde: \K\d+' report.md || echo "0")
            echo "HEALTH_SCORE=$SCORE" >> $GITHUB_ENV
            
            if [ "$SCORE" -ge 80 ]; then
              echo "BADGE_COLOR=brightgreen" >> $GITHUB_ENV
              echo "BADGE_STATUS=Excelente" >> $GITHUB_ENV
            elif [ "$SCORE" -ge 60 ]; then
              echo "BADGE_COLOR=yellow" >> $GITHUB_ENV
              echo "BADGE_STATUS=Bom" >> $GITHUB_ENV
            else
              echo "BADGE_COLOR=red" >> $GITHUB_ENV
              echo "BADGE_STATUS=Crítico" >> $GITHUB_ENV
            fi
          fi

      - name: 💬 Comentar no PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let report = '## 🔬 Análise Avançada de Contexto\n\n';
            
            if (fs.existsSync('report.md')) {
              const fullReport = fs.readFileSync('report.md', 'utf8');
              
              // Limitar tamanho do comentário (GitHub tem limite)
              if (fullReport.length > 60000) {
                report += fullReport.substring(0, 60000);
                report += '\n\n... (relatório truncado - veja artifacts para versão completa)';
              } else {
                report += fullReport;
              }
            } else {
              report += '❌ Erro ao gerar relatório.\n\n';
              report += 'Possíveis causas:\n';
              report += '- Script context_analyzer.py não encontrado\n';
              report += '- Erro de sintaxe no código Python\n';
              report += '- Falta de permissões\n';
            }
            
            report += '\n\n---\n';
            report += `📎 [Ver análise completa nos Artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            // Buscar comentário anterior
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Análise Avançada de Contexto')
            );
            
            // Atualizar ou criar
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

      - name: 📈 Análises complementares
        if: always()
        run: |
          echo "🔍 Executando análises complementares..."
          
          # Radon - Complexidade
          echo "## 📊 Complexidade Ciclomática" > complexity.txt
          echo "" >> complexity.txt
          radon cc . -a -s --total-average >> complexity.txt 2>&1 || echo "Sem análise disponível" >> complexity.txt
          
          # Radon - Maintainability Index  
          echo "" >> complexity.txt
          echo "## 🔧 Índice de Manutenibilidade" >> complexity.txt
          echo "" >> complexity.txt
          radon mi . -s >> complexity.txt 2>&1 || echo "Sem análise disponível" >> complexity.txt
          
          # Bandit - Segurança
          echo "## 🔒 Análise de Segurança" > security.txt
          echo "" >> security.txt
          bandit -r . -f txt >> security.txt 2>&1 || echo "Nenhum problema de segurança detectado" >> security.txt
          
          # Black - Formatação
          echo "## ✨ Verificação de Formatação" > formatting.txt
          echo "" >> formatting.txt
          black --check --diff . >> formatting.txt 2>&1 || echo "Alguns arquivos precisam formatação" >> formatting.txt
          
          echo "✅ Análises complementares concluídas"

      - name: 📦 Upload relatórios como artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-completo-${{ github.run_number }}
          path: |
            report.md
            analysis_data.json
            complexity.txt
            security.txt
            formatting.txt
          retention-days: 30

      - name: 🚨 Verificar problemas críticos
        if: always()
        run: |
          EXIT_CODE=0
          
          if [ -f report.md ]; then
            # Contar problemas críticos
            CRITICAL=$(grep -c "🚨" report.md 2>/dev/null || echo "0")
            
            echo "::notice::Problemas críticos encontrados: $CRITICAL"
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::error::$CRITICAL problema(s) crítico(s) detectado(s)!"
              echo "::error::Corrija os problemas antes de fazer merge."
              EXIT_CODE=1
            else
              echo "::notice::✅ Nenhum problema crítico detectado"
            fi
          else
            echo "::warning::Relatório não gerado - verifique os logs"
          fi
          
          exit $EXIT_CODE

      - name: 📊 Gerar GitHub Summary
        if: always()
        run: |
          echo "# 🔬 Análise de Contexto - Resumo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f analysis_data.json ]; then
            # Extrair dados do JSON
            TOTAL_FUNCS=$(jq -r '.stats.total_functions // 0' analysis_data.json)
            TOTAL_CLASSES=$(jq -r '.stats.total_classes // 0' analysis_data.json)
            TOTAL_ISSUES=$(jq -r '.stats.total_issues // 0' analysis_data.json)
            
            echo "## 📊 Estatísticas" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Métrica | Valor |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|------:|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔧 Funções | $TOTAL_FUNCS |" >> $GITHUB_STEP_SUMMARY
            echo "| 📦 Classes | $TOTAL_CLASSES |" >> $GITHUB_STEP_SUMMARY
            echo "| ⚠️ Problemas | $TOTAL_ISSUES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Score de saúde
            if [ -f report.md ]; then
              SCORE=$(grep -oP 'Score de Saúde: \K\d+' report.md || echo "N/A")
              echo "## 🎯 Score de Saúde" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### $SCORE / 100" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Top 5 problemas
            echo "## 🎯 Top 5 Problemas" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            jq -r '.issues[:5] // [] | .[] | "- **[\(.severity | ascii_upcase)]** \(.message)"' analysis_data.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Nenhum problema detectado" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Análise não concluída" >> $GITHUB_STEP_SUMMARY
          fi

  analise-diff:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔄 Analisar arquivos modificados
        run: |
          echo "# 📝 Arquivos Modificados Neste PR" > diff_analysis.md
          echo "" >> diff_analysis.md
          
          # Obter arquivos Python modificados
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "## Arquivos Python Alterados" >> diff_analysis.md
            echo "" >> diff_analysis.md
            
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                LINES=$(wc -l < "$file" 2>/dev/null || echo "0")
                ADDED=$(git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -c "^+" || echo "0")
                REMOVED=$(git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -c "^-" || echo "0")
                
                echo "### \`$file\`" >> diff_analysis.md
                echo "- **Linhas totais:** $LINES" >> diff_analysis.md
                echo "- **Linhas adicionadas:** $ADDED" >> diff_analysis.md
                echo "- **Linhas removidas:** $REMOVED" >> diff_analysis.md
                echo "" >> diff_analysis.md
              fi
            done <<< "$CHANGED_FILES"
            
            # Estatísticas gerais
            NUM_FILES=$(echo "$CHANGED_FILES" | wc -l)
            echo "---" >> diff_analysis.md
            echo "" >> diff_analysis.md
            echo "**Total:** $NUM_FILES arquivo(s) Python modificado(s)" >> diff_analysis.md
          else
            echo "✅ Nenhum arquivo Python modificado neste PR." >> diff_analysis.md
          fi

      - name: 📤 Upload análise de diff
        uses: actions/upload-artifact@v4
        with:
          name: diff-analysis
          path: diff_analysis.md
          retention-days: 30